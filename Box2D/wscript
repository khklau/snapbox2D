import hashlib
import os
import shutil
import subprocess
import tarfile
import urllib
import zipfile
from waflib import Logs
from waflib.extras.preparation import PreparationContext
from waflib.extras.layout import Solution, Product
from waflib.extras.build_status import BuildStatus
from waflib.extras.filesystem_utils import removeSubdir
from waflib.extras.mirror import MirroredTarFile, MirroredZipFile

NAME = 'snapBox2D'

__buildDir = 'Build'

def options(optCtx):
    optCtx.load('cxx_env dep_resolver')

def prepare(prepCtx):
    prepCtx.options.dep_base_dir = prepCtx.srcnode.find_dir('..').abspath()
    prepCtx.load('cxx_env dep_resolver')

def configure(confCtx):
    confCtx.options.env_conf_dir = confCtx.srcnode.find_dir('env').abspath()
    confCtx.load('cxx_env dep_resolver')
    confCtx.env.product = Product.fromContext(confCtx, NAME, confCtx.env.solution)
    confCtx.env.solution.addProduct(confCtx.env.product)
    confCtx.env.product.include_path_list.append(confCtx.env.product.build_tree.include)
    confCtx.env.product.include_path_list.append(confCtx.env['INCLUDES_TURBO_SHLIB'])
    confCtx.env.product.include_path_list.append(confCtx.env['INCLUDES_TURBO_STLIB'])
    confCtx.env.product.lib_path_list.append(confCtx.env['LIBPATH_TURBO_SHLIB'])
    confCtx.env.product.lib_path_list.append(confCtx.env['STLIBPATH_TURBO_STLIB'])
    confCtx.env.product.rpath_list.append(confCtx.env['LIBPATH_TURBO_SHLIB'])
    if os.name == 'posix':
	confCtx.recurse(os.path.join('Build', 'waf'))
    elif os.name == 'nt':
	# Nothing to do, just use the provided VS solution
	return
    else:
	confCtx.fatal('Unsupported OS %s' % os.name)

def build(buildCtx):
    if os.name == 'posix':
	buildCtx.recurse(os.path.join('Build', 'waf'))
    elif os.name == 'nt':
	buildDir = os.path.join(buildCtx.path.abspath(), __buildDir, 'Build', 'vs2015')
	os.chdir(buildDir)
	returnCode = subprocess.call([
		'devenv.com',
		os.path.join(buildDir, 'Box2D.sln')])
	if returnCode != 0:
	    buildCtx.fatal('Box2D build failed: %d' % returnCode)
    else:
	confCtx.fatal('Unsupported OS %s' % os.name)
